Unit levels;
var
	
	// Variables
	r, row, column, height, width, b: byte;
	current_level: integer=0;
	t_x, t_y, tile_no: byte;	
	temp_s, temp_d, screen, dest, ch_index: pointer;
	this_row: integer;
	tiles_across:byte;
	
	// screen buffer
	screen_buffer: array[1000] of byte;
	
	tiles: incbin("levels/map - Tiles.bin");	
	
	level: incbin("levels/map.bin");	
	level_p: pointer;


	
	
	procedure draw_tile(t_x, t_y, tile_no: global byte);
	begin
	
		// Source
		temp_s:=#tiles+(tile_no*9);
	
		// Dest
		dest:=#screen_buffer+((t_y*3)*screen_width)+(t_x*3);
		MemCpyFast(temp_s, 0, dest,3);

		temp_s:=temp_s+3;
		dest:=dest+screen_width;		
		MemCpyFast(temp_s, 0, dest,3);
		
		dest:=dest+screen_width;	
		temp_s:=temp_s+3;	
		MemCpyFast(temp_s, 0, dest,3);

	end;
	

	

	procedure draw_level();
	var
		
	begin

		// set to draw tiles
		dest:=#screen_buffer;	
		level_p:=#level+(current_level*60);

		
		for t_y:=0 to 6 do
		begin
			for t_x:=0 to tiles_across do
			begin
				tile_no:=level_p[(t_y*10)+t_x];
				draw_tile(t_x,t_y,tile_no);
			end;			
		end;
	
	
	end;


	procedure refresh_screen();
	begin
		
		temp_s:=#screen_buffer;
		
		// Need rows at the bottom 
		// for text output
		for r:=0 to 18 do
		begin
			dest:=txt::ytab[r];
			MemCpyFast(temp_s, 0, dest, screen_width);
			temp_s:=temp_s+screen_width;
		end;	

		

	end;


	// Put a char in the screen buffer
	function get_buffer(buf_x, buf_y: byte):byte;
	begin
		
		ch_index:=#screen_buffer+(buf_y*screen_width)+buf_x;
		get_buffer:=ch_index[0];
		
	end;


	// Put a char in the screen buffer
	procedure plot_buffer(plot_x, plot_y: byte, plot_ch: byte);
	begin
		
		ch_index:=#screen_buffer+(plot_y*screen_width)+plot_x;
		ch_index[0]:=plot_ch;
		
	end;



end.