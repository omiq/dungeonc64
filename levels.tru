Unit levels;
var
	
	// Variables
	r, row, column, height, width, b: byte;
	current_level: integer=0;
	t_x, t_y, tile_no: byte;	
	temp_s, temp_d,  dest, ch_index: pointer;
	this_row: integer;
	tiles_across:byte;
	detected_screen_width: byte; // built-in doesn't work for pet
	this_string: string=("                              ");
	
	// Buffer array lookup table for electron
	b_tab: array[18] of integer;
	
	// screen buffer
	screen_buffer: array[1000] of byte;

	level_p: pointer;
	tiles: incbin("tiles.bin");	
	tlevel: array[42] of byte = (
	
		0,	1,	2,	3,	4,	5,	6,
		7,	8,	9,	10,	11,	12,	13,
		14,	15,	16,	17,	18,	19,	20,
		21,	22,	23,	24,	25,	26,	27,
		28,	29,	30,	31,	32,	33,	34,
		35, 36, 37, 38, 39, 40, 41
	);

	// Load level instead of array
	level1: incbin("map1.bin");	
	level2: incbin("map2.bin");	
	level3: incbin("map3.bin");	


	// Put a char in the screen buffer
	function get_buffer(buf_x, buf_y: byte):byte;
	begin
		
		ch_index:=#screen_buffer+(buf_y*detected_screen_width)+buf_x;
		get_buffer:=ch_index[0];
		
	end;


	// Put a char in the screen buffer
	procedure plot_buffer(plot_x, plot_y: byte, plot_ch: byte);
	begin
		
		ch_index:=#screen_buffer+(plot_y*detected_screen_width)+plot_x;
		ch_index[0]:=plot_ch;
		
	end;
	

	// Whole Tile
	procedure draw_tile(t_x, t_y, tile_no: global byte);
	var
		tremainder: byte;
		trow: byte;
		tile_cell: integer;
	begin
	
		// Get starting byte
		tremainder:=mod(tile_no,7);
		trow:=(tile_no-tremainder)/7;
		tile_cell:=(trow * 63)+(tremainder*3);
	
	
		// ROW 1
		temp_s:=#tiles+tile_cell;
		dest:=#screen_buffer+((t_y*3)*detected_screen_width)+(t_x*3);
		MemCpyFast(temp_s, 0, dest,3);

		// ROW 2
		temp_s:=temp_s+21;
		dest:=dest+detected_screen_width;		
		MemCpyFast(temp_s, 0, dest,3);
		
		// ROW 3
		temp_s:=temp_s+21;	
		dest:=dest+detected_screen_width;	
		MemCpyFast(temp_s, 0, dest,3);

	end;

	

	procedure draw_level();
	var
		
	begin

		// set to draw tiles
		dest:=#screen_buffer;	
		
		if(current_level=0) then
		begin
			level_p:=#level1;
		end;
		
		if(current_level=1) then
		begin
			level_p:=#level2;
		end;

		if(current_level > 1) then
		begin
			level_p:=#level3;
		end;
		
		
		for t_y:=0 to 6 do
		begin
			for t_x:=0 to tiles_across do
			begin
				tile_no:=level_p[(t_y*tiles_across)+t_x];
				draw_tile(t_x,t_y,tile_no);
			end;			
		end;
	
	
	
		// Let's drop some keys
		// Key = 75
		levels::plot_buffer(6,6,75);
		levels::plot_buffer(3,3,75);
		
		// Gobbo
		levels::plot_buffer(2,8,87);
		
		// Gold
		levels::plot_buffer(12,12,90);
		
		// Rat
		levels::plot_buffer(18,6,94);

		
		// Health
		levels::plot_buffer(1,14,83);		
		
		// South Door
		levels::plot_buffer(8,17,$43);		
		
	
	end;
	

	

@ifndef BBCM
	procedure refresh_screen();
	begin
		
		temp_s:=#screen_buffer;
		
		// Need rows at the bottom 
		// for text output
		for r:=0 to 18 do
		begin
			dest:=txt::ytab[r];
			@ifdef CPU_Z80
				MemCpy(temp_s, dest, detected_screen_width);
			@endif
			@ifndef X86	
			@ifndef CPU_Z80
				MemCpyFast(temp_s, 0, dest, detected_screen_width);
			@endif
			@endif
			@ifdef X86	
				//MemCpy16(temp_s, dest, detected_screen_width);
			@endif
			temp_s:=temp_s+detected_screen_width;
		end;		

	end;
@endif

@ifdef BBCM

	procedure electron_row(r:global byte) inline;
	begin
		temp_s:=b_tab[r];
		memcpyfast(#temp_s,0,#this_string,30);
		txt::print_string(#this_string,true);	
	end;


	procedure refresh_screen();
	var

	begin
		
		temp_s:=#screen_buffer;
		
		// Need rows at the bottom 
		// for text output
		if(txt::current_bbc()>0) then
		begin


			// BBC
			for r:=0 to 18 do
			begin
				dest:=txt::ytab[r];
				MemCpyFast(temp_s, 0, dest, detected_screen_width);
				temp_s:=temp_s+detected_screen_width;
			end;		
		end
		else
		begin
			
			
			// Electron
			txt::move_to(0,0);
			electron_row(0);
			electron_row(1);
			electron_row(2);
			electron_row(3);
			electron_row(4);
			electron_row(5);
			electron_row(6);
			electron_row(7);
			electron_row(8);
			electron_row(9);
			electron_row(10);
			electron_row(11);
			electron_row(12);
			electron_row(13);
			electron_row(14);
			electron_row(15);
			electron_row(16);
			electron_row(17);

		end;

	end;
@endif





end.