Unit levels;
var
	
	// Variables
	r, row, column, height, width, b: byte;
	

	//level: array[1000] of byte;

	wall_tiles: array[108] of byte = (
		240,241,242,242,241,242,241,242,242,242,242,241, 
		243, 32, 32, 32, 32, 32, 32, 32,235, 32,235, 32, 
		235, 32, 32, 32, 32, 32, 32, 32,243, 32,243, 32, 
		235, 32, 32, 32, 32, 32, 32, 32,243, 32,243, 32, 
		235,241,242,242,241,242,241,242,253,242,242,241, 
		243, 32, 32, 32, 32, 32, 32, 32,235, 32,235, 32, 
		243, 32, 32, 32, 32, 32, 32, 32,235, 32,235, 32, 
		235, 32, 32, 32, 32, 32, 32, 32,243, 32,243, 32, 
		237,241,242,242,241,242,241,242,253,242,242,241 );

	
	
	temp_s, temp_d, screen, dest, ch_index: pointer;
	this_row: integer;
		
	// screen buffer
	screen_buffer: array[1000] of byte;
	
	
	level: incbin("map.flf");	


	
	
	procedure draw_tile(t_x, t_y, tile_no: byte);
	begin
	
		// Source
		temp_s:=#wall_tiles;
		
		case tile_no of
			
			0: 	begin
					
				end;


			1:
				begin
					temp_s:=temp_s+3;
				end;

			2:
				begin
					temp_s:=temp_s+6;
				end;

			3:
				begin
					temp_s:=temp_s+9;
				end;

			4:
				begin
					temp_s:=temp_s+12;
				end;

			5:
				begin
					temp_s:=temp_s+12+3;
				end;

			6:
				begin
					temp_s:=temp_s+12+6;
				end;

			7:
				begin
					temp_s:=temp_s+12+9;					
				end;

			8:
				begin
					temp_s:=temp_s+24+0;
				end;

			9:
				begin
					temp_s:=temp_s+24+3;					
				end;

			10:
				begin
					temp_s:=temp_s+24+6;					
				end;

			11:
				begin
					temp_s:=temp_s+24+9;					
				end;

			12:
				begin
					
				end;
			
		end;
		
		// Dest
		dest:=#level+(t_y*120)+(t_x*3);
		MemCpyFast(temp_s, 0, dest,3);

		temp_s:=temp_s+12;
		dest:=dest+40;		
		MemCpyFast(temp_s, 0, dest,3);
		
		dest:=dest+40;	
		temp_s:=temp_s+12;	
		MemCpyFast(temp_s, 0, dest,3);

	end;

	procedure draw_level();
	begin

		/*
		draw_tile(0,0,0);
		draw_tile(1,0,1);		
		draw_tile(2,0,1);		
		draw_tile(3,0,1);		
		draw_tile(4,0,1);		
		draw_tile(5,0,1);		
		draw_tile(6,0,1);		
		draw_tile(7,0,1);		
		draw_tile(8,0,1);		
		draw_tile(9,0,1);	
		draw_tile(10,0,2);	
		draw_tile(11,0,3);			
		draw_tile(12,0,2);	

		draw_tile(0,1,4);
		draw_tile(1,1,5);		
		draw_tile(2,1,5);		
		draw_tile(3,1,5);		
		draw_tile(4,1,5);		
		draw_tile(5,1,5);		
		draw_tile(6,1,5);		
		draw_tile(7,1,5);		
		draw_tile(8,1,6);	
		
		draw_tile(0,2,4);
		draw_tile(1,2,5);		
		draw_tile(2,2,5);		
		draw_tile(3,2,5);		
		draw_tile(4,2,5);		
		draw_tile(5,2,5);		
		draw_tile(6,2,5);		
		draw_tile(7,2,5);		
		draw_tile(8,2,6);	
		
		draw_tile(0,3,4);
		draw_tile(1,3,5);		
		draw_tile(2,3,5);		
		draw_tile(3,3,5);		
		draw_tile(4,3,5);		
		draw_tile(5,3,5);		
		draw_tile(6,3,5);		
		draw_tile(7,3,5);		
		draw_tile(8,3,6);	
		
		draw_tile(0,4,4);
		draw_tile(1,4,5);		
		draw_tile(2,4,5);		
		draw_tile(3,4,5);		
		draw_tile(4,4,5);		
		draw_tile(5,4,5);		
		draw_tile(6,4,5);		
		draw_tile(7,4,5);		
		draw_tile(8,4,6);	
		
		
		draw_tile(0,5,0);
		draw_tile(1,5,1);		
		draw_tile(2,5,1);		
		draw_tile(3,5,1);		
		draw_tile(4,5,1);		
		draw_tile(5,5,1);		
		draw_tile(6,5,1);		
		draw_tile(7,5,1);		
		draw_tile(8,5,2);		

		draw_tile(0,6,4);
		draw_tile(1,6,5);		
		draw_tile(2,6,5);		
		draw_tile(3,6,5);		
		draw_tile(4,6,5);		
		draw_tile(5,6,5);		
		draw_tile(6,6,5);		
		draw_tile(7,6,5);		
		draw_tile(8,6,6);	
		*/

		
		dest:=#screen_buffer;
		//temp_s:=#level;
		temp_s:=#level+45;
				
		for r:=0 to 20 do
		begin
			MemCpyFast(temp_s, 0, dest,40);
			dest:=dest+40;
			temp_s:=temp_s+40;
		end;	

		
	end;


	// Seems there are 45 bytes of goodness knows
	// what in the level
	procedure get_header();
	
	begin
		
		// Read level header info
		fori b:=0 to 45 do
		begin
			txt::print_dec(level[b],True);
		end;
	end;
	

	procedure refresh_screen();
	begin
		
		//CopyFullScreen(#screen_buffer,SCREEN_CHAR_LOC);
		temp_s:=#screen_buffer;
		
		// Need rows at the bottom 
		// for text output
		for r:=0 to 20 do
		begin
			dest:=txt::ytab[r];
			MemCpyFast(temp_s, 0, dest, 40);
			temp_s:=temp_s+40;
		end;	

		

	end;


	// Put a char in the screen buffer
	function get_buffer(buf_x, buf_y: byte):byte;
	begin
		
		ch_index:=#screen_buffer+(buf_y*40)+buf_x;
		get_buffer:=ch_index[0];
		
	end;


	// Put a char in the screen buffer
	procedure plot_buffer(plot_x, plot_y: byte, plot_ch: byte);
	begin
		
		ch_index:=#screen_buffer+(plot_y*40)+plot_x;
		ch_index[0]:=plot_ch;
		
	end;



end.