program dungeon64;
@use "text/txt"
@use "levels"

	//@projectsettings "system" PET
	//@projectsettings "petmodel" "4032"

	@projectsettings "system" C64



var
	
@ifdef C64	
	// Custom characterset
	@export "custom.flf" "custom.bin" 256
	charset: incbin("custom.bin", $2000);

@endif		
	
	player_char: byte=0;	
	key_press: byte=0;
	charat:byte;
	game_won,game_running: byte;
	x,y,oldx,oldy,i,c,l,w,r: byte;
	
	
	//player inventory
	keys: byte=0;

// ********************************
	@include "functions.inc"
// ********************************

begin



	@ifdef C64
		// C64 has it's own special characters
		c64_chars();
		player_char:=0;
		
	@endif


	
	// Infinite loop
	while(1) do begin
	
	
		// Show start screen
		// *****************
		show_start_screen();
	
		// Initial screen fill
		// and (re)set variables
		init();

	
	
		// Main loop
		while(game_running) do
		begin
	
			
			
			// Backup the current position			
			oldx:=x;
			oldy:=y;
	
			// Get keyboard input
			key_press:=txt::get_key();
	
				// Check the pressed key
				case key_press of
			       
					// Cursor keys defined in unit		        
					txt::CUR_U: if(y>0) then dec(y);
					txt::CUR_D: if(y<23) then inc(y);
					txt::CUR_L: if(x>0) then dec(x);
					txt::CUR_R: if(x<39) then inc(x);
			        
				end;
				
	
				// Find out if the space we want to move to
				// is empty or if it contains anything special
				charat:=levels::get_buffer(x,y);
	
				
				// $20 is space
				if(charat<>$20) then
				begin
				
					// Tile isn't empty so check what should happen
					if(charat>0) then check_collisions();
				

		
				end;
	

				// Remove old position
				// Rather than blank could also get background
				// from the level, but this is easier
				levels::plot_buffer(oldx,oldy,32);

				// Keep the new position and output
				// our player
				levels::plot_buffer(x,y, player_char);

			
				// Update screen from the buffer
				levels::refresh_screen();
			
		end;
		
			
		// Show end screen
		show_end_screen();
	
	
	end;
		
end.

